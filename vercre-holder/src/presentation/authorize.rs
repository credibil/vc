//! # Issuance Authorization Endpoint
//!
//! The authorize endpoint receives confirmation from the holder that they authorize the agent to
//! present the credential to the verifier.

use std::fmt::Debug;

use anyhow::anyhow;
use tracing::instrument;

use super::{Presentation, Status};
use crate::provider::StateManager;
use crate::Endpoint;

impl<P> Endpoint<P>
where
    P: StateManager + Debug,
{
    /// Updates the status of the flow as authorized. The request is the presentation flow ID
    /// generated by the `request` endpoint.
    #[instrument(level = "debug", skip(self))]
    pub async fn authorize(&self, request: String) -> anyhow::Result<Presentation> {
        tracing::debug!("Endpoint::authorize");

        let Ok(mut presentation) = self.get_presentation(&request).await else {
            let e = anyhow!("unable to retrieve presentation state");
            tracing::error!(target: "Endpoint::authorize", ?e);
            return Err(e);
        };

        if presentation.status != Status::Requested {
            let e = anyhow!("invalid presentation state");
            tracing::error!(target: "Endpoint::authorize", ?e);
            return Err(e);
        }
        presentation.status = Status::Authorized;
        if let Err(e) = self.put_presentation(&presentation).await {
            tracing::error!(target: "Endpoint::authorize", ?e);
            return Err(e);
        }
        Ok(presentation)
    }
}