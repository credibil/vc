/*
 Generated by typeshare 1.13.2
*/

/** Logo to display on the credential */
export interface Logo {
	/** Base64 encoded image */
	image: string;
	/** Image media type */
	media_type: string;
}

/** Summary view for a verifiable credential */
export interface CredentialDisplay {
	/** Credential ID */
	id: string;
	/** CSS color to use for the background of a credential display */
	background_color?: string;
	/** CSS color to use for the text of a credential display */
	color?: string;
	/** Label to display on the credential to indicate the issuer */
	issuer?: string;
	/** Logo to display on the credential */
	logo?: Logo;
	/** URL of the original source of the logo */
	logo_url?: string;
	/** Name of the credential */
	name?: string;
}

/** Detail view for a verifiable credential */
export interface CredentialDetail {
	/** Display */
	display: CredentialDisplay;
	/** Issuance date */
	valid_from?: string;
	/** Expiry */
	valid_until?: string;
	/** Description */
	description?: string;
	/** Claims */
	claims: Record<string, string>;
}

/** View model for the credential sub-app */
export interface CredentialView {
	/** List of credentials */
	credentials: CredentialDisplay[];
}

/** Types of PIN characters */
export enum PinInputMode {
	/** Only digits */
	Numeric = "Numeric",
	/** Any characters */
	Text = "Text",
}

/** Criteria for PIN */
export interface PinSchema {
	/** Input mode for the PIN */
	input_mode: PinInputMode;
	/**
	 * Specifies the length of the PIN. This helps the Wallet to render
	 * the input screen and improve the user experience.
	 */
	length: number;
	/**
	 * Guidance for the Holder of the Wallet on how to obtain the Transaction
	 * Code,
	 */
	description?: string;
}

/** Status of the issuance flow. */
export enum IssuanceStatus {
	/** No issuance flow is active. */
	Inactive = "Inactive",
	/** An issuance request has been received. */
	Offered = "Offered",
	/** The issuance request has been accepted. */
	Accepted = "Accepted",
	/** The issuance request has been accepted but a PIN is required. */
	PendingPin = "PendingPin",
	/** The issuance request has been tokenized. */
	Tokenized = "Tokenized",
}

/** Issuance flow viewable state */
export interface IssuanceView {
	/** Credentials on offer */
	credentials: Record<string, CredentialDisplay>;
	/** PIN */
	pin?: string;
	/** PIN schema */
	pin_schema?: PinSchema;
	/** Where we are up to in the flow. */
	status: IssuanceStatus;
}

/**
 * Status of the presentation flow. This is re-typed instead of using the
 * status defined by vercre-holder so that we can use typeshare to generate the
 * equivalent TypeScript enum.
 */
export enum PresentationStatus {
	/** No authorization request is being processed. */
	Inactive = "Inactive",
	/** A new authorization request has been received. */
	Requested = "Requested",
	/** The authorization request has been authorized. */
	Authorized = "Authorized",
}

/** Presentation flow viewable state */
export interface PresentationView {
	/** Presentation request status */
	status: PresentationStatus;
	/** Credentials to present */
	credentials: Record<string, CredentialDisplay>;
}

export enum SubApp {
	Splash = "Splash",
	Credential = "Credential",
	Issuance = "Issuance",
	Presentation = "Presentation",
}

/** View model for the shell to render. All state is translated into this model. */
export interface ViewModel {
	/** The sub-app currently active */
	sub_app: SubApp;
	/** Credential sub-app view state. */
	credential?: CredentialView;
	/** Issuance sub-app view state. */
	issuance?: IssuanceView;
	/** Presentation sub-app view state. */
	presentation?: PresentationView;
	/** Error message, if any */
	error?: string;
}

